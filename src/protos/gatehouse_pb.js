// source: gatehouse.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var actors_pb = require('./actors_pb.js');
goog.object.extend(proto, actors_pb);
var groups_pb = require('./groups_pb.js');
goog.object.extend(proto, groups_pb);
var policies_pb = require('./policies_pb.js');
goog.object.extend(proto, policies_pb);
var roles_pb = require('./roles_pb.js');
goog.object.extend(proto, roles_pb);
var targets_pb = require('./targets_pb.js');
goog.object.extend(proto, targets_pb);
goog.exportSymbol('proto.gatehouse.CheckRequest', null, global);
goog.exportSymbol('proto.gatehouse.CheckResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gatehouse.CheckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gatehouse.CheckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gatehouse.CheckRequest.displayName = 'proto.gatehouse.CheckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gatehouse.CheckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gatehouse.CheckResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gatehouse.CheckResponse.displayName = 'proto.gatehouse.CheckResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gatehouse.CheckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gatehouse.CheckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gatehouse.CheckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gatehouse.CheckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    actor: (f = msg.getActor()) && actors_pb.Actor.toObject(includeInstance, f),
    envAttributesMap: (f = msg.getEnvAttributesMap()) ? f.toObject(includeInstance, proto.common.AttributeValues.toObject) : [],
    targetName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    targetType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    targetAction: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gatehouse.CheckRequest}
 */
proto.gatehouse.CheckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gatehouse.CheckRequest;
  return proto.gatehouse.CheckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gatehouse.CheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gatehouse.CheckRequest}
 */
proto.gatehouse.CheckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new actors_pb.Actor;
      reader.readMessage(value,actors_pb.Actor.deserializeBinaryFromReader);
      msg.setActor(value);
      break;
    case 2:
      var value = msg.getEnvAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.common.AttributeValues.deserializeBinaryFromReader, "", new proto.common.AttributeValues());
         });
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gatehouse.CheckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gatehouse.CheckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gatehouse.CheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gatehouse.CheckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      actors_pb.Actor.serializeBinaryToWriter
    );
  }
  f = message.getEnvAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.common.AttributeValues.serializeBinaryToWriter);
  }
  f = message.getTargetName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTargetType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTargetAction();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional actors.Actor actor = 1;
 * @return {?proto.actors.Actor}
 */
proto.gatehouse.CheckRequest.prototype.getActor = function() {
  return /** @type{?proto.actors.Actor} */ (
    jspb.Message.getWrapperField(this, actors_pb.Actor, 1));
};


/**
 * @param {?proto.actors.Actor|undefined} value
 * @return {!proto.gatehouse.CheckRequest} returns this
*/
proto.gatehouse.CheckRequest.prototype.setActor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gatehouse.CheckRequest} returns this
 */
proto.gatehouse.CheckRequest.prototype.clearActor = function() {
  return this.setActor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gatehouse.CheckRequest.prototype.hasActor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, common.AttributeValues> env_attributes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.AttributeValues>}
 */
proto.gatehouse.CheckRequest.prototype.getEnvAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.AttributeValues>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.common.AttributeValues));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.gatehouse.CheckRequest} returns this
 */
proto.gatehouse.CheckRequest.prototype.clearEnvAttributesMap = function() {
  this.getEnvAttributesMap().clear();
  return this;};


/**
 * optional string target_name = 3;
 * @return {string}
 */
proto.gatehouse.CheckRequest.prototype.getTargetName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gatehouse.CheckRequest} returns this
 */
proto.gatehouse.CheckRequest.prototype.setTargetName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string target_type = 4;
 * @return {string}
 */
proto.gatehouse.CheckRequest.prototype.getTargetType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.gatehouse.CheckRequest} returns this
 */
proto.gatehouse.CheckRequest.prototype.setTargetType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string target_action = 5;
 * @return {string}
 */
proto.gatehouse.CheckRequest.prototype.getTargetAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.gatehouse.CheckRequest} returns this
 */
proto.gatehouse.CheckRequest.prototype.setTargetAction = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gatehouse.CheckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gatehouse.CheckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gatehouse.CheckResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gatehouse.CheckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    decision: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gatehouse.CheckResponse}
 */
proto.gatehouse.CheckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gatehouse.CheckResponse;
  return proto.gatehouse.CheckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gatehouse.CheckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gatehouse.CheckResponse}
 */
proto.gatehouse.CheckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.policies.DECIDE} */ (reader.readEnum());
      msg.setDecision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gatehouse.CheckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gatehouse.CheckResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gatehouse.CheckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gatehouse.CheckResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecision();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional policies.DECIDE decision = 1;
 * @return {!proto.policies.DECIDE}
 */
proto.gatehouse.CheckResponse.prototype.getDecision = function() {
  return /** @type {!proto.policies.DECIDE} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.policies.DECIDE} value
 * @return {!proto.gatehouse.CheckResponse} returns this
 */
proto.gatehouse.CheckResponse.prototype.setDecision = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


goog.object.extend(exports, proto.gatehouse);
