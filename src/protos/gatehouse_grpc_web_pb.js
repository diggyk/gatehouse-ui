/**
 * @fileoverview gRPC-Web generated client stub for gatehouse
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: gatehouse.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require("grpc-web");

var common_pb = require("./common_pb.js");

var actors_pb = require("./actors_pb.js");

var groups_pb = require("./groups_pb.js");

var policies_pb = require("./policies_pb.js");

var roles_pb = require("./roles_pb.js");

var targets_pb = require("./targets_pb.js");
const proto = {};
proto.gatehouse = require("./gatehouse_pb.js");

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gatehouse.GatehouseClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = "text";

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, "");
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gatehouse.GatehousePromiseClient = function (
  hostname,
  credentials,
  options
) {
  if (!options) options = {};
  options.format = "text";

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, "");
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.targets.AddTargetRequest,
 *   !proto.targets.TargetResponse>}
 */
const methodDescriptor_Gatehouse_AddTarget = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/AddTarget",
  grpc.web.MethodType.UNARY,
  targets_pb.AddTargetRequest,
  targets_pb.TargetResponse,
  /**
   * @param {!proto.targets.AddTargetRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  targets_pb.TargetResponse.deserializeBinary
);

/**
 * @param {!proto.targets.AddTargetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.targets.TargetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.targets.TargetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.addTarget = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/AddTarget",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_AddTarget,
    callback
  );
};

/**
 * @param {!proto.targets.AddTargetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.targets.TargetResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.addTarget = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/AddTarget",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_AddTarget
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.targets.ModifyTargetRequest,
 *   !proto.targets.TargetResponse>}
 */
const methodDescriptor_Gatehouse_ModifyTarget = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/ModifyTarget",
  grpc.web.MethodType.UNARY,
  targets_pb.ModifyTargetRequest,
  targets_pb.TargetResponse,
  /**
   * @param {!proto.targets.ModifyTargetRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  targets_pb.TargetResponse.deserializeBinary
);

/**
 * @param {!proto.targets.ModifyTargetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.targets.TargetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.targets.TargetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.modifyTarget = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/ModifyTarget",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_ModifyTarget,
    callback
  );
};

/**
 * @param {!proto.targets.ModifyTargetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.targets.TargetResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.modifyTarget = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/ModifyTarget",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_ModifyTarget
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.targets.RemoveTargetRequest,
 *   !proto.targets.TargetResponse>}
 */
const methodDescriptor_Gatehouse_RemoveTarget = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/RemoveTarget",
  grpc.web.MethodType.UNARY,
  targets_pb.RemoveTargetRequest,
  targets_pb.TargetResponse,
  /**
   * @param {!proto.targets.RemoveTargetRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  targets_pb.TargetResponse.deserializeBinary
);

/**
 * @param {!proto.targets.RemoveTargetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.targets.TargetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.targets.TargetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.removeTarget = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/RemoveTarget",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_RemoveTarget,
    callback
  );
};

/**
 * @param {!proto.targets.RemoveTargetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.targets.TargetResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.removeTarget = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/RemoveTarget",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_RemoveTarget
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.targets.GetAllTargetsRequest,
 *   !proto.targets.MultiTargetResponse>}
 */
const methodDescriptor_Gatehouse_GetTargets = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/GetTargets",
  grpc.web.MethodType.UNARY,
  targets_pb.GetAllTargetsRequest,
  targets_pb.MultiTargetResponse,
  /**
   * @param {!proto.targets.GetAllTargetsRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  targets_pb.MultiTargetResponse.deserializeBinary
);

/**
 * @param {!proto.targets.GetAllTargetsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.targets.MultiTargetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.targets.MultiTargetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.getTargets = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/GetTargets",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_GetTargets,
    callback
  );
};

/**
 * @param {!proto.targets.GetAllTargetsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.targets.MultiTargetResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.getTargets = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/GetTargets",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_GetTargets
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.actors.AddActorRequest,
 *   !proto.actors.ActorResponse>}
 */
const methodDescriptor_Gatehouse_AddActor = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/AddActor",
  grpc.web.MethodType.UNARY,
  actors_pb.AddActorRequest,
  actors_pb.ActorResponse,
  /**
   * @param {!proto.actors.AddActorRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  actors_pb.ActorResponse.deserializeBinary
);

/**
 * @param {!proto.actors.AddActorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.actors.ActorResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.actors.ActorResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.addActor = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/AddActor",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_AddActor,
    callback
  );
};

/**
 * @param {!proto.actors.AddActorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.actors.ActorResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.addActor = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/AddActor",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_AddActor
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.actors.ModifyActorRequest,
 *   !proto.actors.ActorResponse>}
 */
const methodDescriptor_Gatehouse_ModifyActor = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/ModifyActor",
  grpc.web.MethodType.UNARY,
  actors_pb.ModifyActorRequest,
  actors_pb.ActorResponse,
  /**
   * @param {!proto.actors.ModifyActorRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  actors_pb.ActorResponse.deserializeBinary
);

/**
 * @param {!proto.actors.ModifyActorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.actors.ActorResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.actors.ActorResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.modifyActor = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/ModifyActor",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_ModifyActor,
    callback
  );
};

/**
 * @param {!proto.actors.ModifyActorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.actors.ActorResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.modifyActor = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/ModifyActor",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_ModifyActor
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.actors.RemoveActorRequest,
 *   !proto.actors.ActorResponse>}
 */
const methodDescriptor_Gatehouse_RemoveActor = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/RemoveActor",
  grpc.web.MethodType.UNARY,
  actors_pb.RemoveActorRequest,
  actors_pb.ActorResponse,
  /**
   * @param {!proto.actors.RemoveActorRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  actors_pb.ActorResponse.deserializeBinary
);

/**
 * @param {!proto.actors.RemoveActorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.actors.ActorResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.actors.ActorResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.removeActor = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/RemoveActor",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_RemoveActor,
    callback
  );
};

/**
 * @param {!proto.actors.RemoveActorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.actors.ActorResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.removeActor = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/RemoveActor",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_RemoveActor
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.actors.GetAllActorsRequest,
 *   !proto.actors.MultiActorResponse>}
 */
const methodDescriptor_Gatehouse_GetActors = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/GetActors",
  grpc.web.MethodType.UNARY,
  actors_pb.GetAllActorsRequest,
  actors_pb.MultiActorResponse,
  /**
   * @param {!proto.actors.GetAllActorsRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  actors_pb.MultiActorResponse.deserializeBinary
);

/**
 * @param {!proto.actors.GetAllActorsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.actors.MultiActorResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.actors.MultiActorResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.getActors = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/GetActors",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_GetActors,
    callback
  );
};

/**
 * @param {!proto.actors.GetAllActorsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.actors.MultiActorResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.getActors = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/GetActors",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_GetActors
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.roles.AddRoleRequest,
 *   !proto.roles.RoleResponse>}
 */
const methodDescriptor_Gatehouse_AddRole = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/AddRole",
  grpc.web.MethodType.UNARY,
  roles_pb.AddRoleRequest,
  roles_pb.RoleResponse,
  /**
   * @param {!proto.roles.AddRoleRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  roles_pb.RoleResponse.deserializeBinary
);

/**
 * @param {!proto.roles.AddRoleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.roles.RoleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.roles.RoleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.addRole = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/AddRole",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_AddRole,
    callback
  );
};

/**
 * @param {!proto.roles.AddRoleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.roles.RoleResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.addRole = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/AddRole",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_AddRole
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.roles.RemoveRoleRequest,
 *   !proto.roles.RoleResponse>}
 */
const methodDescriptor_Gatehouse_RemoveRole = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/RemoveRole",
  grpc.web.MethodType.UNARY,
  roles_pb.RemoveRoleRequest,
  roles_pb.RoleResponse,
  /**
   * @param {!proto.roles.RemoveRoleRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  roles_pb.RoleResponse.deserializeBinary
);

/**
 * @param {!proto.roles.RemoveRoleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.roles.RoleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.roles.RoleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.removeRole = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/RemoveRole",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_RemoveRole,
    callback
  );
};

/**
 * @param {!proto.roles.RemoveRoleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.roles.RoleResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.removeRole = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/RemoveRole",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_RemoveRole
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.roles.GetAllRolesRequest,
 *   !proto.roles.MultiRoleResponse>}
 */
const methodDescriptor_Gatehouse_GetRoles = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/GetRoles",
  grpc.web.MethodType.UNARY,
  roles_pb.GetAllRolesRequest,
  roles_pb.MultiRoleResponse,
  /**
   * @param {!proto.roles.GetAllRolesRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  roles_pb.MultiRoleResponse.deserializeBinary
);

/**
 * @param {!proto.roles.GetAllRolesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.roles.MultiRoleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.roles.MultiRoleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.getRoles = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/GetRoles",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_GetRoles,
    callback
  );
};

/**
 * @param {!proto.roles.GetAllRolesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.roles.MultiRoleResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.getRoles = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/GetRoles",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_GetRoles
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.groups.AddGroupRequest,
 *   !proto.groups.GroupResponse>}
 */
const methodDescriptor_Gatehouse_AddGroup = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/AddGroup",
  grpc.web.MethodType.UNARY,
  groups_pb.AddGroupRequest,
  groups_pb.GroupResponse,
  /**
   * @param {!proto.groups.AddGroupRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  groups_pb.GroupResponse.deserializeBinary
);

/**
 * @param {!proto.groups.AddGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.groups.GroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.groups.GroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.addGroup = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/AddGroup",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_AddGroup,
    callback
  );
};

/**
 * @param {!proto.groups.AddGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.groups.GroupResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.addGroup = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/AddGroup",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_AddGroup
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.groups.ModifyGroupRequest,
 *   !proto.groups.GroupResponse>}
 */
const methodDescriptor_Gatehouse_ModifyGroup = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/ModifyGroup",
  grpc.web.MethodType.UNARY,
  groups_pb.ModifyGroupRequest,
  groups_pb.GroupResponse,
  /**
   * @param {!proto.groups.ModifyGroupRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  groups_pb.GroupResponse.deserializeBinary
);

/**
 * @param {!proto.groups.ModifyGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.groups.GroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.groups.GroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.modifyGroup = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/ModifyGroup",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_ModifyGroup,
    callback
  );
};

/**
 * @param {!proto.groups.ModifyGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.groups.GroupResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.modifyGroup = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/ModifyGroup",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_ModifyGroup
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.groups.RemoveGroupRequest,
 *   !proto.groups.GroupResponse>}
 */
const methodDescriptor_Gatehouse_RemoveGroup = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/RemoveGroup",
  grpc.web.MethodType.UNARY,
  groups_pb.RemoveGroupRequest,
  groups_pb.GroupResponse,
  /**
   * @param {!proto.groups.RemoveGroupRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  groups_pb.GroupResponse.deserializeBinary
);

/**
 * @param {!proto.groups.RemoveGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.groups.GroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.groups.GroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.removeGroup = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/RemoveGroup",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_RemoveGroup,
    callback
  );
};

/**
 * @param {!proto.groups.RemoveGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.groups.GroupResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.removeGroup = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/RemoveGroup",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_RemoveGroup
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.groups.GetAllGroupsRequest,
 *   !proto.groups.MultiGroupResponse>}
 */
const methodDescriptor_Gatehouse_GetGroups = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/GetGroups",
  grpc.web.MethodType.UNARY,
  groups_pb.GetAllGroupsRequest,
  groups_pb.MultiGroupResponse,
  /**
   * @param {!proto.groups.GetAllGroupsRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  groups_pb.MultiGroupResponse.deserializeBinary
);

/**
 * @param {!proto.groups.GetAllGroupsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.groups.MultiGroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.groups.MultiGroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.getGroups = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/GetGroups",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_GetGroups,
    callback
  );
};

/**
 * @param {!proto.groups.GetAllGroupsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.groups.MultiGroupResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.getGroups = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/GetGroups",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_GetGroups
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.policies.AddPolicyRequest,
 *   !proto.policies.PolicyResponse>}
 */
const methodDescriptor_Gatehouse_AddPolicy = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/AddPolicy",
  grpc.web.MethodType.UNARY,
  policies_pb.AddPolicyRequest,
  policies_pb.PolicyResponse,
  /**
   * @param {!proto.policies.AddPolicyRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  policies_pb.PolicyResponse.deserializeBinary
);

/**
 * @param {!proto.policies.AddPolicyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.policies.PolicyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.policies.PolicyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.addPolicy = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/AddPolicy",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_AddPolicy,
    callback
  );
};

/**
 * @param {!proto.policies.AddPolicyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.policies.PolicyResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.addPolicy = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/AddPolicy",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_AddPolicy
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.policies.ModifyPolicyRequest,
 *   !proto.policies.PolicyResponse>}
 */
const methodDescriptor_Gatehouse_ModifyPolicy = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/ModifyPolicy",
  grpc.web.MethodType.UNARY,
  policies_pb.ModifyPolicyRequest,
  policies_pb.PolicyResponse,
  /**
   * @param {!proto.policies.ModifyPolicyRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  policies_pb.PolicyResponse.deserializeBinary
);

/**
 * @param {!proto.policies.ModifyPolicyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.policies.PolicyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.policies.PolicyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.modifyPolicy = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/ModifyPolicy",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_ModifyPolicy,
    callback
  );
};

/**
 * @param {!proto.policies.ModifyPolicyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.policies.PolicyResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.modifyPolicy = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/ModifyPolicy",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_ModifyPolicy
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.policies.RemovePolicyRequest,
 *   !proto.policies.PolicyResponse>}
 */
const methodDescriptor_Gatehouse_RemovePolicy = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/RemovePolicy",
  grpc.web.MethodType.UNARY,
  policies_pb.RemovePolicyRequest,
  policies_pb.PolicyResponse,
  /**
   * @param {!proto.policies.RemovePolicyRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  policies_pb.PolicyResponse.deserializeBinary
);

/**
 * @param {!proto.policies.RemovePolicyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.policies.PolicyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.policies.PolicyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.removePolicy = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/RemovePolicy",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_RemovePolicy,
    callback
  );
};

/**
 * @param {!proto.policies.RemovePolicyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.policies.PolicyResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.removePolicy = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/RemovePolicy",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_RemovePolicy
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.policies.GetPoliciesRequest,
 *   !proto.policies.MultiPolicyResponse>}
 */
const methodDescriptor_Gatehouse_GetPolicies = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/GetPolicies",
  grpc.web.MethodType.UNARY,
  policies_pb.GetPoliciesRequest,
  policies_pb.MultiPolicyResponse,
  /**
   * @param {!proto.policies.GetPoliciesRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  policies_pb.MultiPolicyResponse.deserializeBinary
);

/**
 * @param {!proto.policies.GetPoliciesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.policies.MultiPolicyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.policies.MultiPolicyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.getPolicies = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/GetPolicies",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_GetPolicies,
    callback
  );
};

/**
 * @param {!proto.policies.GetPoliciesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.policies.MultiPolicyResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.getPolicies = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/GetPolicies",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_GetPolicies
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gatehouse.CheckRequest,
 *   !proto.gatehouse.CheckResponse>}
 */
const methodDescriptor_Gatehouse_check = new grpc.web.MethodDescriptor(
  "/gatehouse.Gatehouse/check",
  grpc.web.MethodType.UNARY,
  proto.gatehouse.CheckRequest,
  proto.gatehouse.CheckResponse,
  /**
   * @param {!proto.gatehouse.CheckRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.gatehouse.CheckResponse.deserializeBinary
);

/**
 * @param {!proto.gatehouse.CheckRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gatehouse.CheckResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gatehouse.CheckResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gatehouse.GatehouseClient.prototype.check = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/gatehouse.Gatehouse/check",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_check,
    callback
  );
};

/**
 * @param {!proto.gatehouse.CheckRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gatehouse.CheckResponse>}
 *     Promise that resolves to the response
 */
proto.gatehouse.GatehousePromiseClient.prototype.check = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/gatehouse.Gatehouse/check",
    request,
    metadata || {},
    methodDescriptor_Gatehouse_check
  );
};

module.exports = proto.gatehouse;
